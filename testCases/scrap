# case mSIAction
#     when ":move" then enter(room)
#     when ":shoot"
# end 
#Get the collection of all room sets
    def allRoomSet
        puts @@adjToRoom[self.number]
        puts @@adjToRoom[11]
        puts @@adjToRoom[3]
        puts @@adjToRoom[7]
    end


    #Check whether haze exist
            # i=0 
            # while (i < @@hazardRoom[self.number].length)
            #     if( @@hazardRoom[self.number].to_a[i]==haze)
            #         return 
            #     end
            #     i+=1
            # end


            # #check for positive out of bounds
                # if (pos.at(0) > arrLen)
                #     return '\0'
                # #Check for negative out of bounds
                # elsif ( pos.at(0) < (arrLen)*-1)
                #     return '\0'
                # else
                #     for i in seq
                #         #Check to see if not out of bounds
                #         if self[i]=='\0'
                #             return temp
                #         end
                #         temp.append(yield(self[i]))
                #     end
                #     return temp  
                # end


                b	=	["cat","bat","mat","sat"]
# puts b.map(0) {|x|x}.class


a=[1,2,3,4,5]
b = a.map
puts b
puts [1,2,3,4,5].map {|n| n*n}
# a=[1,2,3,4,5]
# puts a[3]
# puts a[3].class



# cave=Cave.dodecahedron
# cave.entrance
# player = Player.new
# puts player.encounter(:bats)

 # puts "Guards #{encounterCallee(:guard)}"
        # puts ""
        # # require 'debug'
        # puts "Bats #{encounterCallee(:bats)}"
        # puts ""
       
        # puts "Pits #{encounterCallee(:pit)}" 
        # puts ""
        # puts @@blockEncounters[0].call()
        # puts @@blockEncounters[2].call()
        # puts @@blockEncounters[1].call()


         # if senseCallee(:guards)
        #     @@blockSenses[0].call()
        # elsif senseCallee(:bats)
        #     @@blockSenses[1].call()
        # else senseCallee(:pits)
        #     @@blockSenses[2].call()
        # end  
         #Sensing 
        # puts "Bats #{senseCallee(:bats)} "
        # puts ""
        # puts "Guards #{senseCallee(:guards)}"
        # puts ""
        # # require 'debug'
        # puts "Pits #{senseCallee(:pit)}" 
        # puts ""
        # else